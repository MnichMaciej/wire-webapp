pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo "TAG: ${TAG}"
                sh "git checkout tags/${TAG}"
            }
        }
        stage('Build'){
            steps{
                dir('/var/jenkins_home/workspace/LAB07/MM400503/Docker'){
                    sh 'docker-compose -f ./docker-compose.yml build --no-cache build-agent'
                }
            }
            post{
                success{
                    echo "Built successfully!"
                }
                failure{
                    echo "Build failed!"
                }
            }
        }
        stage('Test'){
            steps{
                dir('/var/jenkins_home/workspace/LAB07/MM400503/Docker'){
                    sh 'docker-compose -f ./docker-compose.yml build --no-cache test-agent'
                    sh '''TEST_OUTPUT = $(docker-compose  --ansi never up --force-recreate -d test-agent)
                        IFS=$\'\n\' read -r -d \'\' -a test_array < <(  grep \'Tests:\' <<< $TEST_OUTPUT | tr \',\' \'\n\' | sed -e \'s/^[[:space:]]*//\' && printf \'\0\' )'
                        unset test_array[2]'
                        IFS=$\'\n\' read -r -d \'\' -a test_results < <( printf \'%s\n\' \'${test_array[@]}\' | tr \' \' \'\n\' && printf \'\0\' )'
                        if [ ${test_results[0]} == ${test_results[2]} ]; then echo \'100% passed\'; else echo \'Failure. Rate  ${test_results[0]}/${test_results[2]}; return 1;fi\'
                        '''
                }
            }
             post{
                success{
                    echo "Test successfully!"
                }
                failure{
                    echo "Test failed!"
                }
            }
        }
    }

}
